name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags:
      - 'v*'  # triggers on git tag like v1.2.3
  pull_request:

permissions:
  contents: write
  packages: write  # Needed to push Docker images to GitHub Packages

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11.4'

#    - name: Install Poetry
#      run: |
#        curl -sSL https://install.python-poetry.org | python3 -
#        echo "$HOME/.local/bin" >> $GITHUB_PATH
#
#    - name: Install dependencies
#      run: poetry install

    - name: Run code style check (YAPF)
      run: |
        pip install yapf
        yapf -dr ..

#    - name: Extract name and version from pyproject.toml
#      id: meta
#      run: |
#        NAME=$(poetry version | awk '{print $1}')
#        VERSION=$(poetry version | awk '{print $2}')
#        echo "name=$NAME" >> $GITHUB_OUTPUT
#        echo "version=$VERSION" >> $GITHUB_OUTPUT
#
#    - name: Log in to GitHub Container Registry
#      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

#    - name: Build and push Docker image (staging)
#      if: github.event_name == 'pull_request' || (github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/'))
#      run: |
#        IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/${{ steps.meta.outputs.name }}:${{ steps.meta.outputs.version }}-staging
#        docker build \
#          --build-arg NAME=${{ steps.meta.outputs.name }} \
#          --build-arg VERSION=${{ steps.meta.outputs.version }} \
#          -t $IMAGE_NAME .
#        docker push $IMAGE_NAME
#
#    - name: Build and push Docker image (release)
#      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
#      run: |
#        IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/${{ steps.meta.outputs.name }}:${{ steps.meta.outputs.version }}
#        docker build \
#          --build-arg NAME=${{ steps.meta.outputs.name }} \
#          --build-arg VERSION=${{ steps.meta.outputs.version }} \
#          -t $IMAGE_NAME .
#        docker push $IMAGE_NAME

    - name: Bump version after tag (only on tag push)
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        poetry version patch
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add pyproject.toml
        git commit -m "CI: Bump version post-tag"
        git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git HEAD:main

    - name: Notify Slack
      if: always()  # ensures it runs even if previous steps fail
      run: |
        STATUS="✅ Success"
        COLOR="green"
        if [ "${{ job.status }}" != "success" ]; then
          STATUS="❌Failed"
          COLOR="danger"
        fi

        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"attachments\": [{
              \"fallback\": \"GitHub Action status: $STATUS\",
              \"color\": \"$COLOR\",
              \"title\": \"GitHub CI/CD - $STATUS\",
              \"text\": \"Repository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\nBy: ${{ github.actor }}\",
              \"footer\": \"GitHub Actions | Sent to Slack\",
              \"ts\": $(date +%s)
            }]
          }" ${{ secrets.SLACK_WEBHOOK_URL }}
